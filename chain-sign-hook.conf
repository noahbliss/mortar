# shellcheck shell=bash
# shellcheck disable=SC2154

# determine relative postfix required to discard path prepended by DKMS framework
# script path composed like
# run="$dkms_tree/$module/$module_version/$script_type/$2"


root_relative_path=""

while [[ "$(realpath "$dkms_tree/$root_relative_path")" != '/' ]] ; do
    root_relative_path="${root_relative_path}../"
done
root_relative_path="${root_relative_path}../../../"

# get original post-build script path
orig_post_build="$POST_BUILD"

# preview some variables inferred by DKMS
array_size=0
for s in ${#BUILT_MODULE_NAME[@]} \
    ${#BUILT_MODULE_LOCATION[@]} \
    ${#DEST_MODULE_NAME[@]} \
    ${#DEST_MODULE_LOCATION[@]}; do
    ((s > array_size)) && array_size=$s
done

for ((index=0; index < array_size; index++)); do
    built_module_name[$index]=${BUILT_MODULE_NAME[$index]}
    built_module_location[$index]=${BUILT_MODULE_LOCATION[$index]}
    dest_module_name[$index]=${DEST_MODULE_NAME[$index]}
    dest_module_location[$index]=${DEST_MODULE_LOCATION[$index]}

    [[ ! ${built_module_name[$index]} ]] && \
        ((${#DEST_MODULE_LOCATION[@]} == 1)) && \
        built_module_name[$index]=$module
    [[ ! ${dest_module_name[$index]} ]] && \
        dest_module_name[$index]=${built_module_name[$index]}
    [[ ${built_module_location[$index]} && \
        ${built_module_location[$index]:(-1)} != / ]] && \
        built_module_location[$index]="${built_module_location[$index]}/"

    dest_module_location[$index]="$(override_dest_module_location ${dest_module_location[$index]})"
done

# force strip to remove foreign signatures
for ((index=0; index < array_size; index++)); do
    STRIP[$index]=Y
done

# discover module suffix
set_module_suffix "$kernelver"
base_dir="$dkms_tree/$module/$module_version/$kernelver/$arch"

# make temporary file with script performing required actions and passing
# control to original POST_BUILD script
tmpscript="$(mktemp)"
cat > "$tmpscript" << EOF
#!/bin/bash

rm -f "$tmpscript"

orig_post_build="$orig_post_build"
run="$dkms_tree/$module/$module_version/build/$orig_post_build"

if [[ \$orig_post_build ]] ; then
    if [[ -x \${run%% *} ]]; then
        \$run
    else
        >&2 echo "The \$orig_post_build script is not executable."
    fi
fi

EOF

for ((count=0; count < ${#built_module_name[@]}; count++)); do
if [ "$module_compressed_suffix" = ".gz" ]; then
    cat >> "$tmpscript" << EOF
    gunzip -f "$dkms_tree/$module/$module_version/build/${built_module_location[$count]}${built_module_name[$count]}$module_suffix"
    "$kernel_source_dir/scripts/sign-file" sha256 /etc/mortar/private/db.key /etc/mortar/private/db.crt.der "$dkms_tree/$module/$module_version/build/${built_module_location[$count]}${built_module_name[$count]}$module_uncompressed_suffix"
    gzip -9f "$dkms_tree/$module/$module_version/build/${built_module_location[$count]}${built_module_name[$count]}$module_uncompressed_suffix"
EOF
elif [ "$module_compressed_suffix" = ".xz" ]; then
    cat >> "$tmpscript" << EOF
unxz -f "$dkms_tree/$module/$module_version/build/${built_module_location[$count]}${built_module_name[$count]}$module_suffix"
"$kernel_source_dir/scripts/sign-file" sha256 /etc/mortar/private/db.key /etc/mortar/private/db.crt.der "$dkms_tree/$module/$module_version/build/${built_module_location[$count]}${built_module_name[$count]}$module_uncompressed_suffix"
xz -f "$dkms_tree/$module/$module_version/build/${built_module_location[$count]}${built_module_name[$count]}$module_uncompressed_suffix"
EOF
else
    cat >> "$tmpscript" << EOF
"$kernel_source_dir/scripts/sign-file" sha256 /etc/mortar/private/db.key /etc/mortar/private/db.crt.der "$dkms_tree/$module/$module_version/build/${built_module_location[$count]}${built_module_name[$count]}$module_suffix"
EOF
fi

# Copy module again, with signature
cat >> "$tmpscript" << EOF
cp -f "$dkms_tree/$module/$module_version/build/${built_module_location[$count]}${built_module_name[$count]}$module_suffix" "$base_dir/module/${dest_module_name[$count]}$module_suffix" >/dev/null
EOF
done

chmod +x "$tmpscript"

POST_BUILD="${root_relative_path}${tmpscript}"

# supress DKMS signature mechanism on Ubuntu.
# $tmpfile is a file which is used by DKMS to source this config safely.
if type sign_build >/dev/null 2>&1 ; then
    if [[ "$tmpfile" ]] && [[ "${export_envs+x}" ]] && \
    [[ $_ != $0 ]] && (( $$ != BASHPID )) ; then
        # matched safe_source environment
    
        cat >> "$tmpfile" << EOF
unset sign_build
sign_build () { :; }
EOF
    
        exec >>"$tmpfile"
        for _export_env in "${export_envs[@]}"; do
            for _i in $(eval echo \${!$_export_env[@]}); do
                eval echo '$_export_env[$_i]=\"${'$_export_env'[$_i]}\"'
            done
        done
        exit 0
    else
        # safe_source condition doesn't match. probably it's a direct source
        unset sign_build
        sign_build () { :; }
    fi
fi
